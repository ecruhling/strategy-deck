{"version":3,"file":"plugin-block.css","mappings":";;;AAAA;AAEA;EACC;ACAD;;AAGE;EACC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AAAH;AAWE;EACC;EACA;EACA;AATH;;AAeA;EACC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AAZD;AAcC;EACC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AAZF;AAeC;EACC;EACA;EACA;UAAA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AAbF;AAeE;EACC;AAbH;AAgBE;EAEC;EACA;AAfH;AAiBG;EACC;AAfJ;AAmBE;EACC;AAjBH;AAmBG;EACC;EACA;AAjBJ;AAsBC;EACC;EACA;EACA;EACA;EACA;AApBF;AAuBC;EArED;IAsEE;IACA;EApBA;AACF;;AAyBA;EACC;EACA;EACA;EACA;EACA;EACA;AAtBD;AAwBC;EACC;EACA;EACA;EACA;EACA;EACA;EACA;AAtBF;;AA0BA;EACC;IACC;IACA;EAvBA;EA0BD;IACC;IACA;EAxBA;EA2BD;IACC;IACA;EAzBA;AACF,C","sources":["webpack://strategydeck/./assets/src/styles/utils/_custom_props.scss","webpack://strategydeck/./assets/src/styles/block.scss"],"sourcesContent":["/* CSS custom properties */\n\n:root {\n\t--my-plugin_color-primary: #00A0D2; // Primary Color\n}\n","@import \"utils/_custom_props\";\n@import \"utils/_functions\";\n\n// Admin & Block\nbody.post-type-deck {\n\t.editor-styles-wrapper {\n\t\t.wp-block-post-content {\n\t\t\tdisplay: flex;\n\t\t\tflex-wrap: wrap;\n\t\t\tmargin-left: -0.4rem;\n\t\t\tmargin-right: -0.4rem;\n\t\t\tmargin-top: 0;\n\t\t\theight: 55vh;\n\t\t\tjustify-content: center;\n\t\t\talign-items: center;\n\n\t\t\t.wp-block-strategydeck-deck-card {\n\t\t\t}\n\t\t}\n\t}\n}\n\n// Frontend only\n#deck-form {\n\t.wp-block-strategydeck-deck-card {\n\t\tlabel {\n\t\t\twidth: 100%;\n\t\t\ttext-align: center;\n\t\t\tz-index: 10;\n\t\t}\n\t}\n}\n\n// block\n.wp-block-strategydeck-deck-card {\n\tposition: relative;\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n\tpadding: 1rem;\n\theight: 10vw;\n\tmin-height: 70px;\n\tmax-height: 115px;\n\tmax-width: 205px !important;\n\tmargin: 0 0.5rem 1rem;\n\n\tlabel {\n\t\ttransition: all 0.25s ease-in-out;\n\t\tdisplay: inline-block;\n\t\tcolor: #b1a57e;\n\t\tmargin-bottom: 0 !important;\n\t\tpadding: 3px 5px;\n\t\tline-height: 1;\n\t\tfont-family: \"Domaine Display Regular\", sans-serif;\n\t\tfont-size: 1.375rem;\n\t\tz-index: 20;\n\t}\n\n\tinput {\n\t\ttransition: all 0.25s ease-in-out;\n\t\tbackground-color: #fff9f1;\n\t\tappearance: none;\n\t\tborder: solid 2px #b1a57e;\n\t\tborder-radius: 2px;\n\t\tposition: absolute;\n\t\tinset: 0;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\tdisplay: block;\n\t\tz-index: 10;\n\n\t\t&::before {\n\t\t\tdisplay: none !important;\n\t\t}\n\n\t\t&:hover,\n\t\t&:checked {\n\t\t\tborder-color: #3e5e6f;\n\t\t\tcursor: pointer;\n\n\t\t\t+ label {\n\t\t\t\tcolor: #3e5e6f !important;\n\t\t\t}\n\t\t}\n\n\t\t&:checked {\n\t\t\tbackground-color: #3e5e6f;\n\n\t\t\t+ label {\n\t\t\t\tcolor: #fff9f1 !important;\n\t\t\t\tfont-style: italic;\n\t\t\t}\n\t\t}\n\t}\n\n\tspan.notice {\n\t\tposition: absolute;\n\t\ttop: 50%;\n\t\tleft: 50%;\n\t\ttransform: translateX(-50%) translateY(-50%);\n\t\tz-index: 25;\n\t}\n\n\t@media (min-width: 768px) {\n\t\tflex: 0 0 auto;\n\t\twidth: 16.6667% !important;\n\t}\n}\n\n$spinnerSize: 40;\n\nsvg.spinner {\n\tz-index: 20;\n\twidth: $spinnerSize + px;\n\theight: $spinnerSize + px;\n\tx: 0px;\n\ty: 0px;\n\tviewBox: 0 0 $spinnerSize $spinnerSize;\n\n\tcircle {\n\t\tfill: transparent;\n\t\tstroke: rgba(176, 189, 197, 0.75);\n\t\tstroke-width: 4;\n\t\tstroke-linecap: round;\n\t\tstroke-dasharray: (3.14 * $spinnerSize);\n\t\ttransform-origin: (0.5px * $spinnerSize) (0.5px * $spinnerSize) 0;\n\t\tanimation: spinner 1.5s linear infinite;\n\t}\n}\n\n@keyframes spinner {\n\t0% {\n\t\ttransform: rotate(0deg);\n\t\tstroke-dashoffset: (0.66 * $spinnerSize);\n\t}\n\n\t50% {\n\t\ttransform: rotate(720deg);\n\t\tstroke-dashoffset: (3.14 * $spinnerSize);\n\t}\n\n\t100% {\n\t\ttransform: rotate(1080deg);\n\t\tstroke-dashoffset: (0.66 * $spinnerSize);\n\t}\n}\n\n@function escape-svg($string) {\n\t@if str-index($string, \"data:image/svg+xml\") {\n\t\t@each $char, $encoded in $escaped-characters {\n\t\t\t// Do not escape the url brackets\n\t\t\t@if str-index($string, \"url(\") == 1 {\n\t\t\t\t$string: url(\"#{str-replace(str-slice($string, 6, -3), $char, $encoded)}\");\n\t\t\t} @else {\n\t\t\t\t$string: str-replace($string, $char, $encoded);\n\t\t\t}\n\t\t}\n\t}\n\n\t@return $string;\n}\n"],"names":[],"sourceRoot":""}